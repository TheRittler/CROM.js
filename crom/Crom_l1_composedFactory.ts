import {Group} from "crom_l1_composed/Group";
import {RelationshipConstraint} from "crom_l1_composed/RelationshipConstraint";
import {Attribute} from "crom_l1_composed/Attribute";
import {Constraint} from "crom_l1_composed/Constraint";
import {RoleType} from "crom_l1_composed/RoleType";
import {Acyclic} from "crom_l1_composed/Acyclic";
import {Inheritance} from "crom_l1_composed/Inheritance";
import {TypedElement} from "crom_l1_composed/TypedElement";
import {Irreflexive} from "crom_l1_composed/Irreflexive";
import {Operation} from "crom_l1_composed/Operation";
import {DataInheritance} from "crom_l1_composed/DataInheritance";
import {Relation} from "crom_l1_composed/Relation";
import {CompartmentInheritance} from "crom_l1_composed/CompartmentInheritance";
import {RelationshipImplication} from "crom_l1_composed/RelationshipImplication";
import {DataType} from "crom_l1_composed/DataType";
import {RoleProhibition} from "crom_l1_composed/RoleProhibition";
import {RigidType} from "crom_l1_composed/RigidType";
import {Reflexive} from "crom_l1_composed/Reflexive";
import {CompartmentType} from "crom_l1_composed/CompartmentType";
import {IntraRelationshipConstraint} from "crom_l1_composed/IntraRelationshipConstraint";
import {RoleImplication} from "crom_l1_composed/RoleImplication";
import {RoleInheritance} from "crom_l1_composed/RoleInheritance";
import {RoleConstraint} from "crom_l1_composed/RoleConstraint";
import {RelationTarget} from "crom_l1_composed/RelationTarget";
import {RoleGroup} from "crom_l1_composed/RoleGroup";
import {Fulfillment} from "crom_l1_composed/Fulfillment";
import {RoleEquivalence} from "crom_l1_composed/RoleEquivalence";
import {Type} from "crom_l1_composed/Type";
import {Cyclic} from "crom_l1_composed/Cyclic";
import {InterRelationshipConstraint} from "crom_l1_composed/InterRelationshipConstraint";
import {Part} from "crom_l1_composed/Part";
import {NaturalType} from "crom_l1_composed/NaturalType";
import {Relationship} from "crom_l1_composed/Relationship";
import {Total} from "crom_l1_composed/Total";
import {AbstractRoleRef} from "crom_l1_composed/AbstractRoleRef";
import {Model} from "crom_l1_composed/Model";
import {Parameter} from "crom_l1_composed/Parameter";
import {NaturalInheritance} from "crom_l1_composed/NaturalInheritance";
import {RelationshipExclusion} from "crom_l1_composed/RelationshipExclusion";
import {AntiRigidType} from "crom_l1_composed/AntiRigidType";
import {Place} from "crom_l1_composed/Place";
import {ComplexConstraint} from "crom_l1_composed/ComplexConstraint";
import {ParthoodConstraint} from "crom_l1_composed/ParthoodConstraint";
import { EFactory } from "ecore/EFactory";
export interface Crom_l1_composedFactory extends EFactory{
	createModel():Model;
	createRigidType():RigidType;
	createGroup():Group;
	createRelation():Relation;
	createParameter():Parameter;
	createOperation():Operation;
	createAttribute():Attribute;
	createType():Type;
	createDataType():DataType;
	createNaturalType():NaturalType;
	createCompartmentType():CompartmentType;
	createAntiRigidType():AntiRigidType;
	createRoleType():RoleType;
	createRelationship():Relationship;
	createFulfillment():Fulfillment;
	createInheritance():Inheritance;
	createConstraint():Constraint;
	createRoleConstraint():RoleConstraint;
	createRelationshipConstraint():RelationshipConstraint;
	createIntraRelationshipConstraint():IntraRelationshipConstraint;
	createInterRelationshipConstraint():InterRelationshipConstraint;
	createComplexConstraint():ComplexConstraint;
	createDataInheritance():DataInheritance;
	createNaturalInheritance():NaturalInheritance;
	createCompartmentInheritance():CompartmentInheritance;
	createRoleInheritance():RoleInheritance;
	createPlace():Place;
	createRelationshipImplication():RelationshipImplication;
	createRelationshipExclusion():RelationshipExclusion;
	createRelationTarget():RelationTarget;
	createIrreflexive():Irreflexive;
	createCyclic():Cyclic;
	createTotal():Total;
	createAcyclic():Acyclic;
	createReflexive():Reflexive;
	createRoleGroup():RoleGroup;
	createRoleImplication():RoleImplication;
	createRoleEquivalence():RoleEquivalence;
	createRoleProhibition():RoleProhibition;
	createPart():Part;
	createTypedElement():TypedElement;
	createParthoodConstraint():ParthoodConstraint;
	createAbstractRoleRef():AbstractRoleRef;
}
